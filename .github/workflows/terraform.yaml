# name: Terraform CI/CD Pipeline

# on:
#   pull_request:
#     paths:
#       - 'AWS_*/terraform/**'
#     types: [opened, synchronize, reopened]

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write  # Allow GitHub Actions to request an ID token

#     steps:
#     # Step 1: Checkout Repository
#     - name: Checkout Repository
#       uses: actions/checkout@v3
    
#     # Step 2: Find Terraform Directory Dynamically.
#     - name: Find Terraform Directory
#       id: find-terraform
#       run: |
#         TERRAFORM_DIR=$(find . -type d -path "./AWS_Siu/terraform" | head -n 1)
#         if [ -z "$TERRAFORM_DIR" ]; then
#           echo "Terraform directory not found!"
#           exit 1
#         fi
#         echo "terraform_dir=$TERRAFORM_DIR" >> $GITHUB_ENV

#     # Step 3: Set up Terraform
#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.5.0

#     # Step 4: Configure AWS Credentials
#     - name: Configure AWS Credentials
#       id: aws-credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-region: ${{ secrets.AWS_REGION }}    # AWS region from secrets
#         role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # ARN of the role to assume
#         role-session-name: TerraformSession
#         audience: sts.amazonaws.com

#     # Step 5: Verify AWS Credentials
#     - name: Verify AWS Credentials
#       run: aws sts get-caller-identity

#     # Step 6: Initialize Terraform
#     - name: Terraform Init
#       run: terraform init
#       working-directory: ${{ env.terraform_dir }}

#     # Step 7: Validate Terraform Configuration
#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: ${{ env.terraform_dir }}

#     # Step 8: Terraform Plan
#     - name: Terraform Plan
#       run: terraform plan
#       working-directory: ${{ env.terraform_dir }}

#     # Step 9: Apply Terraform Changes (Only on Merge)
#     - name: Terraform Apply
#       if: github.event_name == 'push'
#       run: terraform apply -auto-approve
#       working-directory: ${{ env.terraform_dir }}


name: Terraform Lambda Deployment

on:
  push:
    branches:
      - main 
      - feature/micro-tasks
    paths:
      - 'AWS_**/terraform/**'

jobs:
  deploy:
    name: Deploy Lambda via Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Enables GitHub Actions to assume a role using OIDC
      contents: read

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Find Terraform Directory
      - name: Find Terraform Directory
        id: find-terraform
        run: |
          TERRAFORM_DIR=$(find . -type d -path "./AWS_Siu/terraform" | head -n 1)
          if [ -z "$TERRAFORM_DIR" ]; then
            echo "Terraform directory not found!"
            exit 1
          fi
          echo "terraform_dir=$TERRAFORM_DIR" >> $GITHUB_ENV

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Configure AWS credentials using OIDC and STS AssumeRole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}      # ARN of the role to assume
          aws-region: ${{ secrets.AWS_REGION }}            # e.g. us-east-1
          role-session-name: terraform-session
          audience: sts.amazonaws.com

      # Step 5: Verify credentials (optional)
      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      # Step 6: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.terraform_dir }}

      # Step 7: Terraform Validate
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.terraform_dir }}

      # Step 8: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.terraform_dir }}

      # Step 9: Terraform Apply (only on push to main)
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.terraform_dir }}
